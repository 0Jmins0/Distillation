nohup: ignoring input
/home/xyzhang/project/Distillation/src/models/Students/MVAlexNet.py:137: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(model_path, map_location=torch.device("cuda" if torch.cuda.is_available() else "cpu"))
/home/xyzhang/anaconda3/envs/Distillation/lib/python3.9/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/xyzhang/anaconda3/envs/Distillation/lib/python3.9/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.
  warnings.warn(msg)
/home/xyzhang/project/Distillation/src/evaluate.py:282: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(f"../models/exp/train_models/{args.train_data}/{args.model_name}/{args.model_T}/{args.loss}/best_model_lr_{args.lr}_batch_{args.batch_size}_rGL_{args.rGL}_rOI_{args.rOI}.pth")['model_state_dict'])
/home/xyzhang/project/Distillation/src/evaluate.py:318: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  features = torch.load(path_1)

init ALEXNET model...

Loading pre-trained model from ../models/exp/train_models/OS-ESB-core/MV_AlexNet/best_model_lr_1e-06_batch_16.pth...
Pre-trained features loaded successfully.
Extracting query features:   0%|          | 0/120 [00:00<?, ?it/s]Extracting query features:   1%|          | 1/120 [00:00<00:31,  3.75it/s]Extracting query features:   9%|▉         | 11/120 [00:00<00:03, 36.08it/s]Extracting query features:  18%|█▊        | 21/120 [00:00<00:01, 55.77it/s]Extracting query features:  26%|██▌       | 31/120 [00:00<00:01, 68.32it/s]Extracting query features:  34%|███▍      | 41/120 [00:00<00:01, 76.59it/s]Extracting query features:  42%|████▎     | 51/120 [00:00<00:00, 82.15it/s]Extracting query features:  51%|█████     | 61/120 [00:00<00:00, 85.91it/s]Extracting query features:  59%|█████▉    | 71/120 [00:01<00:00, 88.69it/s]Extracting query features:  68%|██████▊   | 81/120 [00:01<00:00, 90.49it/s]Extracting query features:  76%|███████▌  | 91/120 [00:01<00:00, 91.70it/s]Extracting query features:  84%|████████▍ | 101/120 [00:01<00:00, 92.47it/s]Extracting query features:  92%|█████████▎| 111/120 [00:01<00:00, 93.10it/s]Extracting query features: 100%|██████████| 120/120 [00:01<00:00, 78.43it/s]
features torch.Size([452, 257, 768])
features_after torch.Size([452, 197376])
query_labels ['solid of revolution___discs' 'rectangular-cubic prism___handles'
 'rectangular-cubic prism___miscellaneous'
 'rectangular-cubic prism___small machined blocks'
 'rectangular-cubic prism___long machine elements'
 'rectangular-cubic prism___thick slotted plates'
 'solid of revolution___discs'
 'rectangular-cubic prism___thick slotted plates'
 'solid of revolution___gear like parts'
 'solid of revolution___flange like parts'
 'solid of revolution___flange like parts'
 'rectangular-cubic prism___handles'
 'rectangular-cubic prism___slender links'
 'solid of revolution___flange like parts'
 'solid of revolution___miscellaneous'
 'solid of revolution___round change at end' 'solid of revolution___discs'
 'rectangular-cubic prism___t shaped parts'
 'rectangular-cubic prism___prismatic stock'
 'solid of revolution___bearing like parts'
 'solid of revolution___cylindrical parts'
 'solid of revolution___cylindrical parts'
 'solid of revolution___pulley like parts'
 'rectangular-cubic prism___long machine elements'
 'rectangular-cubic prism___thick plates'
 'rectangular-cubic prism___thick slotted plates'
 'rectangular-cubic prism___small machined blocks'
 'solid of revolution___cylindrical parts'
 'flat-thin wallcomponents___bracket like parts'
 'rectangular-cubic prism___machined plates'
 'solid of revolution___miscellaneous'
 'flat-thin wallcomponents___thin plates'
 'rectangular-cubic prism___small machined blocks'
 'solid of revolution___gear like parts'
 'rectangular-cubic prism___t shaped parts'
 'solid of revolution___round change at end'
 'solid of revolution___miscellaneous'
 'solid of revolution___bearing like parts'
 'flat-thin wallcomponents___bracket like parts'
 'solid of revolution___flange like parts'
 'solid of revolution___long pins'
 'rectangular-cubic prism___machined plates'
 'rectangular-cubic prism___handles'
 'rectangular-cubic prism___u shaped parts'
 'solid of revolution___long pins' 'solid of revolution___gear like parts'
 'solid of revolution___cylindrical parts'
 'rectangular-cubic prism___machined plates'
 'flat-thin wallcomponents___thin plates'
 'flat-thin wallcomponents___bracket like parts'
 'solid of revolution___pulley like parts'
 'solid of revolution___long pins'
 'rectangular-cubic prism___thick plates'
 'solid of revolution___pulley like parts'
 'rectangular-cubic prism___slender links'
 'rectangular-cubic prism___miscellaneous'
 'rectangular-cubic prism___thick plates'
 'rectangular-cubic prism___handles'
 'rectangular-cubic prism___t shaped parts'
 'rectangular-cubic prism___small machined blocks'
 'rectangular-cubic prism___long machine elements'
 'rectangular-cubic prism___long machine elements'
 'solid of revolution___cylindrical parts' 'solid of revolution___discs'
 'solid of revolution___long pins' 'solid of revolution___discs'
 'rectangular-cubic prism___thick plates'
 'solid of revolution___bolt like parts'
 'rectangular-cubic prism___miscellaneous'
 'solid of revolution___flange like parts'
 'rectangular-cubic prism___slender links'
 'rectangular-cubic prism___thick slotted plates'
 'solid of revolution___gear like parts'
 'rectangular-cubic prism___u shaped parts'
 'flat-thin wallcomponents___thin plates'
 'solid of revolution___pulley like parts'
 'rectangular-cubic prism___t shaped parts'
 'solid of revolution___bearing like parts' 'solid of revolution___nuts'
 'rectangular-cubic prism___miscellaneous'
 'rectangular-cubic prism___prismatic stock'
 'solid of revolution___round change at end'
 'solid of revolution___long pins'
 'rectangular-cubic prism___prismatic stock' 'solid of revolution___nuts'
 'solid of revolution___bolt like parts'
 'rectangular-cubic prism___slender links'
 'rectangular-cubic prism___thick slotted plates'
 'solid of revolution___round change at end'
 'solid of revolution___gear like parts'
 'flat-thin wallcomponents___bracket like parts'
 'rectangular-cubic prism___thick plates'
 'solid of revolution___bearing like parts'
 'solid of revolution___bolt like parts'
 'rectangular-cubic prism___small machined blocks'
 'rectangular-cubic prism___u shaped parts' 'solid of revolution___nuts'
 'rectangular-cubic prism___prismatic stock' 'solid of revolution___nuts'
 'solid of revolution___bolt like parts'
 'rectangular-cubic prism___u shaped parts'
 'rectangular-cubic prism___handles'
 'rectangular-cubic prism___slender links'
 'rectangular-cubic prism___machined plates'
 'solid of revolution___bearing like parts'
 'rectangular-cubic prism___machined plates'
 'solid of revolution___round change at end'
 'rectangular-cubic prism___miscellaneous'
 'rectangular-cubic prism___t shaped parts'
 'rectangular-cubic prism___u shaped parts'
 'flat-thin wallcomponents___bracket like parts'
 'solid of revolution___nuts'
 'rectangular-cubic prism___long machine elements'
 'solid of revolution___bolt like parts'
 'rectangular-cubic prism___prismatic stock'
 'solid of revolution___miscellaneous'
 'flat-thin wallcomponents___thin plates'
 'solid of revolution___miscellaneous'
 'flat-thin wallcomponents___thin plates'
 'solid of revolution___pulley like parts']
       mAP|  NDCG@100|     ANMRR|
   0.37749|   0.18252|   0.63349|
pr curve: 
[0.8208883042111329, 0.7506672561058598, 0.6089432343638543, 0.49918001753769303, 0.3918425311008995, 0.32538361156758666, 0.2464582638835694, 0.2149115090583368, 0.15786473616121072, 0.12860194315453818, 0.11195628342258496]
结果已保存到 ../output/acc/accuracy_10.csv
